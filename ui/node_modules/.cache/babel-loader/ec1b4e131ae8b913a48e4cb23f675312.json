{"remainingRequest":"C:\\demo\\metadata\\ui\\node_modules\\babel-loader\\lib\\index.js!C:\\demo\\metadata\\ui\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\demo\\metadata\\ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\demo\\metadata\\ui\\src\\components\\ml-search\\ml-input.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\demo\\metadata\\ui\\src\\components\\ml-search\\ml-input.vue","mtime":1707869128000},{"path":"C:\\demo\\metadata\\ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1707869666000},{"path":"C:\\demo\\metadata\\ui\\node_modules\\babel-loader\\lib\\index.js","mtime":1707869666000},{"path":"C:\\demo\\metadata\\ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1707869666000},{"path":"C:\\demo\\metadata\\ui\\node_modules\\vue-loader\\lib\\index.js","mtime":1707869662000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.search\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: 'ml-input',\n  props: {\n    qtext: {\n      type: String\n    },\n    search: {\n      type: Function\n    },\n    suggest: {\n      type: Function\n    }\n  },\n  data: function data() {\n    return {\n      tmpQtext: this.qtext || '',\n      suggestions: [],\n      loadingSuggestions: false\n    };\n  },\n  methods: {\n    clear: function clear() {\n      console.log('Empty search');\n      this.tmpQtext = '';\n      this.hideSuggestions();\n\n      if (this.$store.state.search) {\n        this.search(this.tmpQtext);\n      }\n    },\n    resolveSuggest: function resolveSuggest(tmpQtext) {\n      var _this = this;\n\n      this.loadingSuggestions = true;\n      this.suggest(tmpQtext).then(function (result) {\n        _this.suggestions = result;\n        _this.loadingSuggestions = false;\n      });\n    },\n    selectSuggestion: function selectSuggestion(s) {\n      console.log('Selected suggestion ' + s);\n      this.tmpQtext = s;\n      this.resolveSuggest(this.tmpQtext);\n      this.focusToInput();\n    },\n    focusToSuggestions: function focusToSuggestions() {\n      if (this.suggestions.length) {\n        console.log('Focus to suggestions');\n        this.$refs.suggestions.focus();\n      } else {\n        this.resolveSuggest(this.tmpQtext);\n      }\n    },\n    focusToInput: function focusToInput() {\n      console.log('Focus to input');\n      this.$refs.input.focus();\n    },\n    hideSuggestions: function hideSuggestions() {\n      console.log('Hide suggestions');\n      this.suggestions = [];\n      this.focusToInput();\n    }\n  }\n};",{"version":3,"sources":["ml-input.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA,eAAA;AACA,EAAA,IAAA,EAAA,UADA;AAEA,EAAA,KAAA,EAAA;AACA,IAAA,KAAA,EAAA;AACA,MAAA,IAAA,EAAA;AADA,KADA;AAIA,IAAA,MAAA,EAAA;AACA,MAAA,IAAA,EAAA;AADA,KAJA;AAOA,IAAA,OAAA,EAAA;AACA,MAAA,IAAA,EAAA;AADA;AAPA,GAFA;AAaA,EAAA,IAbA,kBAaA;AACA,WAAA;AACA,MAAA,QAAA,EAAA,KAAA,KAAA,IAAA,EADA;AAEA,MAAA,WAAA,EAAA,EAFA;AAGA,MAAA,kBAAA,EAAA;AAHA,KAAA;AAKA,GAnBA;AAoBA,EAAA,OAAA,EAAA;AACA,IAAA,KADA,mBACA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,cAAA;AACA,WAAA,QAAA,GAAA,EAAA;AACA,WAAA,eAAA;;AACA,UAAA,KAAA,MAAA,CAAA,KAAA,CAAA,MAAA,EAAA;AACA,aAAA,MAAA,CAAA,KAAA,QAAA;AACA;AACA,KARA;AASA,IAAA,cATA,0BASA,QATA,EASA;AAAA;;AACA,WAAA,kBAAA,GAAA,IAAA;AACA,WAAA,OAAA,CAAA,QAAA,EAAA,IAAA,CAAA,UAAA,MAAA,EAAA;AACA,QAAA,KAAA,CAAA,WAAA,GAAA,MAAA;AACA,QAAA,KAAA,CAAA,kBAAA,GAAA,KAAA;AACA,OAHA;AAIA,KAfA;AAgBA,IAAA,gBAhBA,4BAgBA,CAhBA,EAgBA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,yBAAA,CAAA;AACA,WAAA,QAAA,GAAA,CAAA;AACA,WAAA,cAAA,CAAA,KAAA,QAAA;AACA,WAAA,YAAA;AACA,KArBA;AAsBA,IAAA,kBAtBA,gCAsBA;AACA,UAAA,KAAA,WAAA,CAAA,MAAA,EAAA;AACA,QAAA,OAAA,CAAA,GAAA,CAAA,sBAAA;AACA,aAAA,KAAA,CAAA,WAAA,CAAA,KAAA;AACA,OAHA,MAGA;AACA,aAAA,cAAA,CAAA,KAAA,QAAA;AACA;AACA,KA7BA;AA8BA,IAAA,YA9BA,0BA8BA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,gBAAA;AACA,WAAA,KAAA,CAAA,KAAA,CAAA,KAAA;AACA,KAjCA;AAkCA,IAAA,eAlCA,6BAkCA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,kBAAA;AACA,WAAA,WAAA,GAAA,EAAA;AACA,WAAA,YAAA;AACA;AAtCA;AApBA,CAAA","sourcesContent":["<template>\n  <form class=\"ml-input ml-search form-inline\" role=\"search\"\n    v-on:submit.prevent=\"hideSuggestions();search(tmpQtext)\">\n    <div class=\"input-group\">\n      <input ref=\"input\" type=\"text\" class=\"form-control\" placeholder=\"Search...\" autocomplete=\"off\"\n        v-model=\"tmpQtext\" v-on:input.prevent=\"resolveSuggest(tmpQtext)\"\n        v-on:keydown.down.prevent=\"focusToSuggestions()\"\n        v-on:keydown.esc.prevent=\"hideSuggestions()\"/>\n      <span v-if=\"tmpQtext\" class=\"search-input-icon search-input-clear form-control-feedback\"\n        v-on:click.prevent=\"clear()\">\n        <i class=\"fa fa-times-circle\"></i>\n      </span>\n      <span v-if=\"loadingSuggestions\" class=\"search-input-icon search-loading form-control-feedback\">\n        <i class=\"fa fa-refresh fa-spin\"></i>\n      </span>\n      <div class=\"input-group-addon search-submit\"\n        v-on:click.prevent=\"search(tmpQtext)\">\n        <i class=\"fa fa-search\"></i>\n      </div>\n    </div>\n    <transition name=\"fade\" mode=\"out-in\">\n      <select v-if=\"suggestions.length\" ref=\"suggestions\" class=\"suggestions\" :size=\"suggestions.length\"\n        v-on:click.prevent=\"focusToSuggestions()\"\n        v-on:keydown.enter.prevent=\"selectSuggestion($event.target.value)\"\n        v-on:keydown.esc.prevent=\"hideSuggestions()\">\n        <option v-for=\"(s, $index) in suggestions\" :key=\"$index\">{{ s }}</option>\n      </select>\n    </transition>\n  </form>\n</template>\n\n<script>\nexport default {\n  name: 'ml-input',\n  props: {\n    qtext: {\n      type: String\n    },\n    search: {\n      type: Function\n    },\n    suggest: {\n      type: Function\n    }\n  },\n  data() {\n    return {\n      tmpQtext: this.qtext || '',\n      suggestions: [],\n      loadingSuggestions: false\n    };\n  },\n  methods: {\n    clear() {\n      console.log('Empty search');\n      this.tmpQtext = '';\n      this.hideSuggestions();\n      if (this.$store.state.search) {\n        this.search(this.tmpQtext);\n      }\n    },\n    resolveSuggest(tmpQtext) {\n      this.loadingSuggestions = true;\n      this.suggest(tmpQtext).then(result => {\n        this.suggestions = result;\n        this.loadingSuggestions = false;\n      });\n    },\n    selectSuggestion(s) {\n      console.log('Selected suggestion ' + s);\n      this.tmpQtext = s;\n      this.resolveSuggest(this.tmpQtext);\n      this.focusToInput();\n    },\n    focusToSuggestions() {\n      if (this.suggestions.length) {\n        console.log('Focus to suggestions');\n        this.$refs.suggestions.focus();\n      } else {\n        this.resolveSuggest(this.tmpQtext);\n      }\n    },\n    focusToInput() {\n      console.log('Focus to input');\n      this.$refs.input.focus();\n    },\n    hideSuggestions() {\n      console.log('Hide suggestions');\n      this.suggestions = [];\n      this.focusToInput();\n    }\n  }\n};\n</script>\n\n<style lang=\"less\" scoped>\n.ml-input {\n  .input-group {\n    width: 100%;\n  }\n\n  .search-submit {\n    width: 40px !important;\n  }\n\n  .search-input-icon {\n    z-index: 3;\n    top: 0px;\n  }\n\n  .search-input-clear {\n    right: 35px;\n    cursor: pointer;\n    cursor: hand;\n    pointer-events: auto;\n  }\n\n  .search-loading {\n    right: -35px;\n  }\n\n  .suggestions {\n    left: 25px;\n    top: 35px;\n    position: absolute;\n  }\n}\n</style>\n"],"sourceRoot":"src\\components\\ml-search"}]}