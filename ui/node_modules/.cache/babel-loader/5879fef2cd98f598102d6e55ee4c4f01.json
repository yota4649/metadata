{"remainingRequest":"C:\\demo\\metadata\\ui\\node_modules\\babel-loader\\lib\\index.js!C:\\demo\\metadata\\ui\\src\\api\\CRUDApi.js","dependencies":[{"path":"C:\\demo\\metadata\\ui\\src\\api\\CRUDApi.js","mtime":1709353800207},{"path":"C:\\demo\\metadata\\ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1707869666000},{"path":"C:\\demo\\metadata\\ui\\node_modules\\babel-loader\\lib\\index.js","mtime":1707869666000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.promise\";\nimport \"core-js/modules/es7.promise.finally\";\nimport { polyfill } from 'es6-promise';\nimport 'isomorphic-fetch';\npolyfill();\nvar api = '/api/crud/'; // TODO: consider refactoring out to utils library with identical\n// function in grove-vue-visjs-graph\n\nfunction buildUrl(path, params) {\n  var url = new URL(api + path, window.location.href);\n\n  if (params) {\n    Object.keys(params).forEach(function (key) {\n      if (Array.isArray(params[key])) {\n        params[key].map(function (param) {\n          return url.searchParams.append(key, param);\n        });\n      } else {\n        url.searchParams.append(key, params[key]);\n      }\n    });\n  }\n\n  return url;\n}\n\nfunction buildCrudUrl(crudType, id, params, view) {\n  var path = crudType + (id ? '/' + encodeURIComponent(id) : '') + (view ? '/' + view : '');\n  return buildUrl(path, params);\n} // // copied from Angular.js\n// function isObject(value) {\n//   // http://jsperf.com/isobject4\n//   return value !== null && typeof value === 'object';\n// }\n\n\nexport default {\n  name: 'CRUDApi',\n  view: function view(crudType, id, _view, params) {\n    console.log('yota CRUDapi.js crudType');\n    console.log(crudType);\n    console.log(buildCrudUrl(crudType, id, params, _view));\n    var URL = buildCrudUrl(crudType, id, params, _view); //return fetch(buildCrudUrl(crudType, id, params, view), \n\n    return fetch(URL, {\n      method: 'GET',\n      credentials: 'same-origin'\n    }).then(function (response) {\n      console.log('Not Error');\n      console.log('-------------------------');\n      console.log(response);\n      console.log('-------------------------');\n      return response.text().then(function (text) {\n        return {\n          isError: false,\n          response: text\n        };\n      });\n    }, function (error) {\n      console.log('Error');\n      console.log(response);\n      return {\n        isError: true,\n        error: error\n      };\n    });\n  },\n  create: function create(crudType, id, data, format, params) {\n    console.log(\"++++++++++++++++++++++++ creeate +++++++++++++++++\");\n    console.log(\"id\", id);\n    console.log(\"crudType\", crudType);\n    console.log(\"format\", format);\n    console.log(\"params\", params);\n    console.log(\"data\", data);\n    console.log(data.type);\n    console.log(\"built URL\");\n    params = {};\n    params.collection = \"test\";\n    console.log(buildCrudUrl(crudType, id, params));\n    return fetch(buildCrudUrl(crudType, id, params), {\n      method: 'POST',\n      headers: {\n        'content-type': data.type //'application/' + (format === 'binary' ? 'octet-stream' : format)\n        //'application/' + (format === 'binary' ? 'binary' : format)\n\n      },\n      body: format === 'json' ? JSON.stringify(data) : data,\n      credentials: 'same-origin'\n    }).then(function (response) {\n      var id = response.headers.get('location');\n      return response.text().then(function (text) {\n        if (response.status === 201) {\n          return {\n            isError: false,\n            response: text,\n            id: id\n          };\n        } else {\n          return {\n            isError: true,\n            error: text,\n            id: id\n          };\n        }\n      });\n    }, function (error) {\n      return {\n        isError: true,\n        error: error\n      };\n    });\n  },\n  read: function read(crudType, id, params) {\n    return fetch(buildCrudUrl(crudType, id, params), {\n      method: 'GET',\n      credentials: 'same-origin'\n    }).then(function (response) {\n      return response.text().then(function (text) {\n        return {\n          isError: false,\n          response: text\n        };\n      });\n    }, function (error) {\n      return {\n        isError: true,\n        error: error\n      };\n    });\n  },\n  update: function update(crudType, id, data, format, params) {\n    return fetch(buildCrudUrl(crudType, id, params), {\n      method: 'PUT',\n      headers: {\n        'content-type': 'application/' + (format === 'binary' ? 'octet-stream' : format)\n      },\n      body: format === 'json' ? JSON.stringify(data) : data,\n      credentials: 'same-origin'\n    }).then(function (response) {\n      return response.text().then(function (text) {\n        return {\n          isError: false,\n          response: text\n        };\n      });\n    }, function (error) {\n      return {\n        isError: true,\n        error: error\n      };\n    });\n  },\n  delete: function _delete(crudType, id, params) {\n    return fetch(buildCrudUrl(crudType, id, params), {\n      method: 'DELETE',\n      credentials: 'same-origin'\n    }).then(function (response) {\n      return response.text().then(function (text) {\n        if (response.status === 204) {\n          return {\n            isError: false,\n            response: text\n          };\n        } else {\n          return {\n            isError: true,\n            error: text\n          };\n        }\n      });\n    }, function (error) {\n      return {\n        isError: true,\n        error: error\n      };\n    });\n  }\n};",{"version":3,"sources":["C:\\demo\\metadata\\ui\\src\\api\\CRUDApi.js"],"names":["polyfill","api","buildUrl","path","params","url","URL","window","location","href","Object","keys","forEach","key","Array","isArray","map","param","searchParams","append","buildCrudUrl","crudType","id","view","encodeURIComponent","name","console","log","fetch","method","credentials","then","response","text","isError","error","create","data","format","type","collection","headers","body","JSON","stringify","get","status","read","update","delete"],"mappings":"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","sourcesContent":["import { polyfill } from 'es6-promise';\nimport 'isomorphic-fetch';\n\npolyfill();\n\nvar api = '/api/crud/';\n\n// TODO: consider refactoring out to utils library with identical\n// function in grove-vue-visjs-graph\nfunction buildUrl(path, params) {\n  var url = new URL(api + path, window.location.href);\n  if (params) {\n    Object.keys(params).forEach(key => {\n      if (Array.isArray(params[key])) {\n        params[key].map(param => url.searchParams.append(key, param));\n      } else {\n        url.searchParams.append(key, params[key]);\n      }\n    });\n  }\n  return url;\n}\n\nfunction buildCrudUrl(crudType, id, params, view) {\n  const path =\n    crudType +\n    (id ? '/' + encodeURIComponent(id) : '') +\n    (view ? '/' + view : '');\n  return buildUrl(path, params);\n}\n\n// // copied from Angular.js\n// function isObject(value) {\n//   // http://jsperf.com/isobject4\n//   return value !== null && typeof value === 'object';\n// }\n\nexport default {\n  name: 'CRUDApi',\n  view(crudType, id, view, params) {\n\n    console.log('yota CRUDapi.js crudType'); console.log(crudType);\n    console.log(buildCrudUrl(crudType, id, params, view));\n    let URL = buildCrudUrl(crudType, id, params, view);\n    //return fetch(buildCrudUrl(crudType, id, params, view), \n    return fetch(URL, { method: 'GET', credentials: 'same-origin' })\n           .then(\n             response => {\n\t       console.log('Not Error');\n\t       console.log('-------------------------');\n\t       console.log(response);\n\t       console.log('-------------------------');\n               return response.text().then(text => {\n                 return { isError: false, response: text };\n               });\n             },\n             error => { \n\t       console.log('Error');\n\t\t     console.log(response);\n\t\t     return { isError: true, error: error }; }\n    );\n  },\n  create(crudType, id, data, format, params) {\n      console.log(\"++++++++++++++++++++++++ creeate +++++++++++++++++\");\n      console.log(\"id\",id);\n      console.log(\"crudType\", crudType);\n      console.log(\"format\", format);\n      console.log(\"params\", params);\n      console.log(\"data\", data);\n      console.log(data.type);\n      console.log(\"built URL\")\n      params={};\n      params.collection=\"test\";\n      console.log(buildCrudUrl(crudType, id, params));\n\n    return fetch(buildCrudUrl(crudType, id, params), {\n      method: 'POST',\n      headers: {\n        'content-type': data.type\n          //'application/' + (format === 'binary' ? 'octet-stream' : format)\n          //'application/' + (format === 'binary' ? 'binary' : format)\n      },\n      body: format === 'json' ? JSON.stringify(data) : data,\n      credentials: 'same-origin'\n    }).then(\n      response => {\n        var id = response.headers.get('location');\n        return response.text().then(text => {\n          if (response.status === 201) {\n            return { isError: false, response: text, id: id };\n          } else {\n            return { isError: true, error: text, id: id };\n          }\n        });\n      },\n      error => {\n        return { isError: true, error: error };\n      }\n    );\n  },\n  read(crudType, id, params) {\n    return fetch(buildCrudUrl(crudType, id, params), {\n      method: 'GET',\n      credentials: 'same-origin'\n    }).then(\n      response => {\n        return response.text().then(text => {\n          return { isError: false, response: text };\n        });\n      },\n      error => {\n        return { isError: true, error: error };\n      }\n    );\n  },\n  update(crudType, id, data, format, params) {\n    return fetch(buildCrudUrl(crudType, id, params), {\n      method: 'PUT',\n      headers: {\n        'content-type':\n          'application/' + (format === 'binary' ? 'octet-stream' : format)\n      },\n      body: format === 'json' ? JSON.stringify(data) : data,\n      credentials: 'same-origin'\n    }).then(\n      response => {\n        return response.text().then(text => {\n          return { isError: false, response: text };\n        });\n      },\n      error => {\n        return { isError: true, error: error };\n      }\n    );\n  },\n  delete(crudType, id, params) {\n    return fetch(buildCrudUrl(crudType, id, params), {\n      method: 'DELETE',\n      credentials: 'same-origin'\n    }).then(\n      response => {\n        return response.text().then(text => {\n          if (response.status === 204) {\n            return { isError: false, response: text };\n          } else {\n            return { isError: true, error: text };\n          }\n        });\n      },\n      error => {\n        return { isError: true, error: error };\n      }\n    );\n  }\n};\n"]}]}