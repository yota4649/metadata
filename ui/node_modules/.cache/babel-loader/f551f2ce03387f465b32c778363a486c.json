{"remainingRequest":"C:\\demo\\metadata\\ui\\node_modules\\babel-loader\\lib\\index.js!C:\\demo\\metadata\\ui\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\demo\\metadata\\ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\demo\\metadata\\ui\\src\\views\\CreatePage.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\demo\\metadata\\ui\\src\\views\\CreatePage.vue","mtime":1707869128000},{"path":"C:\\demo\\metadata\\ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1707869666000},{"path":"C:\\demo\\metadata\\ui\\node_modules\\babel-loader\\lib\\index.js","mtime":1707869666000},{"path":"C:\\demo\\metadata\\ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1707869666000},{"path":"C:\\demo\\metadata\\ui\\node_modules\\vue-loader\\lib\\index.js","mtime":1707869662000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport * as X2JS from 'x2js';\nimport { required, minLength, maxLength, minValue, maxValue, numeric, email } from 'vuelidate/lib/validators';\nimport crudApi from '@/api/CRUDApi.js';\nvar x2js = new X2JS();\nexport default {\n  name: 'CreatePage',\n  props: ['type', 'id'],\n  data: function data() {\n    var _this = this;\n\n    if (this.id) {\n      crudApi.read(this.type, this.id).then(function (response) {\n        _this.person = JSON.parse(response.response);\n      });\n    }\n\n    return {\n      person: this.initPerson(),\n      newTag: null\n    };\n  },\n  computed: {\n    profile: function profile() {\n      return this.$store.state.auth.profile || {};\n    },\n    mode: function mode() {\n      if (this.id) {\n        return 'edit';\n      } else {\n        return 'create';\n      }\n    }\n  },\n  validations: {\n    person: {\n      name: {\n        required: required,\n        minLength: minLength(3),\n        maxLength: maxLength(100)\n      },\n      age: {\n        numeric: numeric\n      },\n      eyeColor: {\n        required: required\n      },\n      gender: {\n        required: required\n      },\n      email: {\n        email: email\n      },\n      location: {\n        latitude: {\n          required: required,\n          minValue: minValue(-90),\n          maxValue: maxValue(90)\n        },\n        longitude: {\n          required: required,\n          minValue: minValue(-180),\n          maxValue: maxValue(180)\n        }\n      },\n      docFormat: {\n        required: required\n      }\n    }\n  },\n  methods: {\n    initPerson: function initPerson() {\n      var _this2 = this;\n\n      if (this.id) {\n        return this.$store.dispatch('crud/' + this.type + '/view', {\n          id: this.id,\n          view: 'metadata'\n        }).then(function (result) {\n          if (!result.isError) {\n            var metadata = JSON.parse(result.response);\n            return _this2.$store.dispatch('crud/' + _this2.type + '/read', {\n              id: _this2.id\n            }).then(function (result) {\n              if (!result.isError) {\n                var doc = result.response;\n                var person = null;\n\n                if (metadata.format === 'json') {\n                  person = JSON.parse(doc);\n                } else {\n                  person = x2js.xml2js(doc);\n\n                  if (person.xml) {\n                    person = person.xml;\n                  }\n                }\n\n                if (!person.tags) {\n                  person.tags = [];\n                }\n\n                if (!person.location) {\n                  person.location = {\n                    latitude: 0,\n                    longitude: 0\n                  };\n                }\n              } else {\n                // error\n                return null;\n              }\n            });\n          } else {\n            // error\n            return null;\n          }\n        });\n      } else {\n        return {\n          name: null,\n          about: null,\n          greeting: null,\n          balance: 0,\n          picture: 'http://placehold.it/32x32',\n          age: 0,\n          eyeColor: null,\n          gender: null,\n          company: null,\n          email: null,\n          phone: null,\n          address: null,\n          location: {\n            latitude: 0,\n            longitude: 0\n          },\n          tags: [],\n          isActive: true,\n          docFormat: 'json'\n        };\n      }\n    },\n    addTag: function addTag() {\n      if (this.newTag && this.newTag !== '' && this.person.tags.indexOf(this.newTag) < 0) {\n        this.person.tags.push(this.newTag);\n      }\n\n      this.newTag = null;\n    },\n    removeTag: function removeTag(index) {\n      this.person.tags.splice(index, 1);\n    },\n    submit: function submit() {\n      var _this3 = this;\n\n      if (this.$v.$invalid) {\n        return;\n      }\n\n      var toast = this.$parent.$refs.toast; //var extension = '.json';\n\n      var data = this.person; // if (this.person.docFormat === 'xml') {\n      //   extension = '.xml';\n      //   var wrap = {\n      //     xml: this.person\n      //   };\n      //   data = x2js.js2xml(wrap);\n      // }\n\n      if (this.mode === 'create') {\n        return this.$store.dispatch('crud/' + this.type + '/create', {\n          data: data,\n          format: this.person.docFormat\n        }).then(function (response) {\n          if (response.isError) {\n            toast.showToast(response.error, {\n              theme: 'error'\n            });\n          } else {\n            toast.showToast('Created', {\n              theme: 'success'\n            });\n\n            _this3.$router.push({\n              name: 'root.view',\n              params: {\n                id: response.id\n              }\n            });\n          }\n        });\n      } else {\n        // use update when in update mode\n        return this.$store.dispatch('crud/' + this.type + '/update', {\n          id: this.id,\n          data: data,\n          format: this.person.docFormat\n        }).then(function (response) {\n          if (response.isError) {\n            toast.showToast(response.error, {\n              theme: 'error'\n            });\n          } else {\n            toast.showToast('Saved', {\n              theme: 'success'\n            });\n\n            _this3.$router.push({\n              name: 'root.view',\n              params: {\n                id: _this3.id\n              }\n            });\n          }\n        });\n      }\n    }\n  }\n};",{"version":3,"sources":["CreatePage.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"create\">\n    <div class=\"row\" v-if=\"!profile.disallowUpdates\">\n      <div class=\"col-sm-12\">\n        <b-alert variant=\"warning\">Not allowed</b-alert>\n      </div>\n    </div>\n    <div class=\"row\" v-if=\"profile.disallowUpdates\">\n      <div class=\"col-sm-12\">\n        <b-alert variant=\"warning\">Updates are disallowed</b-alert>\n      </div>\n    </div>\n    <div v-if=\"!profile.disallowUpdates\">\n      <div class=\"row\">\n        <div class=\"col-sm-2\">\n        </div>\n        <h2 class=\"col-sm-10\" v-if=\"mode === 'create'\">Create a Document</h2>\n        <h2 class=\"col-sm-10\" v-if=\"mode === 'edit'\">Edit \"{{ id }}\"</h2>\n      </div>\n      <form class=\"form-horizontal\">\n        <div class=\"form-group\">\n          <div class=\"col-sm-8 col-sm-offset-2\">\n            <strong class=\"required alert-danger\"><em>required</em></strong>\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label class=\"col-sm-2 control-label required\">Name</label>\n          <div class=\"col-sm-10\">\n            <input type=\"text\" class=\"form-control\" placeholder=\"person's name\" v-model.trim=\"person.name\"\n               name=\"name\" minlength=\"3\" maxlength=\"100\" v-on:input=\"$v.person.name.$touch\">\n          </div>\n        </div>\n        <div class=\"row form-error\" v-if=\"$v.person.name.$invalid\">\n          <div class=\"col-md-10 col-md-offset-2 has-error has-feedback\" >\n            <div>\n              <p class=\"alert alert-danger\" v-if=\"!$v.person.name.required\">Person's name is required.</p>\n              <p class=\"alert alert-danger\" v-if=\"!$v.person.name.minLength\">Minimum 3 characters.</p>\n              <p class=\"alert alert-danger\" v-if=\"!$v.person.name.maxLength\">Maximum of 100 characters.</p>\n            </div>\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label class=\"col-sm-2 control-label\">About</label>\n          <div class=\"col-sm-10\">\n            <textarea rows=\"8\" class=\"form-control\" v-model=\"person.about\"/>\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label class=\"col-sm-2 control-label\">Greeting</label>\n          <div class=\"col-sm-10\">\n            <input type=\"text\" class=\"form-control\" v-model=\"person.greeting\" placeholder=\"How this person should be greeted on login\">\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label class=\"col-sm-2 control-label\">Balance</label>\n          <div class=\"col-sm-10\">\n            <input type=\"text\" class=\"form-control\" v-model=\"person.balance\" placeholder=\"\">\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label class=\"col-sm-2 control-label\">Picture</label>\n          <div class=\"col-sm-10\">\n            <input type=\"text\" class=\"form-control\" v-model=\"person.picture\" placeholder=\"\">\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label class=\"col-sm-2 control-label\">Age</label>\n          <div class=\"col-sm-10\">\n            <input type=\"number\" class=\"form-control\" v-model=\"person.age\" placeholder=\"\" name=\"age\" v-on:input=\"$v.person.age.$touch\">\n          </div>\n        </div>\n        <div class=\"row form-error\" v-if=\"$v.person.age.$invalid\">\n          <div class=\"col-md-10 col-md-offset-2 has-error has-feedback\" >\n            <div>\n              <p class=\"alert alert-danger\" v-if=\"!$v.person.age.numeric\">Invalid age format.</p>\n            </div>\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label class=\"col-sm-2 control-label required\">Eye Color</label>\n          <div class=\"col-sm-10\">\n            <input type=\"text\" class=\"form-control\" v-model=\"person.eyeColor\" placeholder=\"\" name=\"eyeColor\"  v-on:input=\"$v.person.eyeColor.$touch\"/>\n          </div>\n        </div>\n        <div class=\"row form-error\" v-if=\"$v.person.eyeColor.$invalid\">\n          <div class=\"col-md-10 col-md-offset-2 has-error has-feedback\" >\n            <div>\n              <p class=\"alert alert-danger\" v-if=\"!$v.person.eyeColor.required\">Eye Color is required.</p>\n            </div>\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label class=\"col-sm-2 control-label required\">Gender</label>\n          <div class=\"col-sm-1\">\n            <label class=\"radio-inline\"><input type=\"radio\" value=\"female\" v-model=\"person.gender\"\n              placeholder=\"\" name=\"gender\" v-on:input=\"$v.person.gender.$touch\">Female</label>\n          </div>\n          <div class=\"col-sm-1\">\n            <label class=\"radio-inline\"><input type=\"radio\" value=\"male\" v-model=\"person.gender\"\n              placeholder=\"\" name=\"gender\" v-on:input=\"$v.person.gender.$touch\">Male</label>\n          </div>\n        </div>\n        <div class=\"row form-error\" v-if=\"$v.person.gender.$invalid\">\n          <div class=\"col-md-10 col-md-offset-2 has-error has-feedback\" >\n            <div>\n              <p class=\"alert alert-danger\" v-if=\"!$v.person.gender.required\">Gender is required.</p>\n            </div>\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label class=\"col-sm-2 control-label\">Company</label>\n          <div class=\"col-sm-10\">\n            <input type=\"text\" class=\"form-control\" v-model=\"person.company\" placeholder=\"\">\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label class=\"col-sm-2 control-label\">Email</label>\n          <div class=\"col-sm-10\">\n            <input type=\"email\" class=\"form-control\" v-model=\"person.email\" placeholder=\"\" name=\"email\" v-on:input=\"$v.person.email.$touch\">\n          </div>\n        </div>\n        <div class=\"row form-error\" ng-if=\"$v.person.email.$invalid\">\n          <div class=\"col-md-10 col-md-offset-2 has-error has-feedback\" >\n            <div>\n              <p class=\"alert alert-danger\" v-if=\"!$v.person.email.email\">Invalid email format.</p>\n            </div>\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label class=\"col-sm-2 control-label\">Phone</label>\n          <div class=\"col-sm-10\">\n            <input type=\"text\" class=\"form-control\" v-model=\"person.phone\" placeholder=\"\">\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label class=\"col-sm-2 control-label\">Address</label>\n          <div class=\"col-sm-10\">\n            <input type=\"text\" class=\"form-control\" v-model=\"person.address\" placeholder=\"\">\n          </div>\n        </div>\n        <div class=\"form-group\" v-if=\"person.location\">\n          <label class=\"col-sm-2 control-label\">Location</label>\n          <div class=\"col-sm-5\">\n            <input type=\"number\" class=\"form-control\" v-model=\"person.location.latitude\" placeholder=\"\"\n              min=\"-90\" max=\"90\" name=\"latitude\" v-on:input=\"$v.person.location.latitude.$touch\">\n          </div>\n          <div class=\"col-sm-5\">\n            <input type=\"number\" class=\"form-control\" v-model=\"person.location.longitude\" placeholder=\"\"\n               min=\"-180\" max=\"180\" name=\"longitude\" v-on:input=\"$v.person.location.longitude.$touch\">\n          </div>\n        </div>\n        <div class=\"row form-error\" v-if=\"$v.person.location.latitude.$invalid\">\n          <div class=\"col-md-10 col-md-offset-2 has-error has-feedback\" >\n            <div>\n              <p class=\"alert alert-danger\" v-if=\"!$v.person.location.latitude.required\">Latitude is required if longitude is filled.</p>\n              <p class=\"alert alert-danger\" v-if=\"!$v.person.location.latitude.minValue\">Minimum value for latitude is -90.</p>\n              <p class=\"alert alert-danger\" v-if=\"!$v.person.location.latitude.maxValue\">Maximum value for latitude is 90.</p>\n            </div>\n          </div>\n        </div>\n        <div class=\"row form-error\" ng-if=\"$v.person.location.longitude.$invalid\">\n          <div class=\"col-md-10 col-md-offset-2 has-error has-feedback\" >\n              <p class=\"alert alert-danger\" v-if=\"!$v.person.location.longitude.required\">Longitude is required if latitude is filled.</p>\n              <p class=\"alert alert-danger\" v-if=\"!$v.person.location.longitude.minValue\">Minimum value for longitude is -180.</p>\n              <p class=\"alert alert-danger\" v-if=\"!$v.person.location.longitude.maxValue\">Maximum value for longitude is 180.</p>\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label class=\"col-sm-2 control-label\">Tags</label>\n          <div class=\"col-sm-9\">\n            <input type=\"text\" class=\"form-control\" v-model=\"newTag\">\n            <div class=\"tag btn btn-info\" v-for=\"(tag, $index) in person.tags\" :key=\"$index\">\n              <span>{{tag}}</span>\n              <span class=\"glyphicon glyphicon-remove-circle\" v-on:click.prevent=\"removeTag(index)\"></span>\n            </div>\n          </div>\n          <div class=\"col-sm-1 text-right\">\n            <button class=\"add-feature btn btn-info\" v-on:click.prevent=\"addTag()\">Add</button>\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label class=\"col-sm-2 control-label\">Active</label>\n          <div class=\"col-sm-10\">\n            <input type=\"checkbox\" v-model=\"person.isActive\"/>\n          </div>\n        </div>\n        <!--div class=\"form-group\">\n          <label class=\"col-sm-2 control-label required\">Document Format</label>\n          <div class=\"col-sm-1\">\n            <label class=\"radio-inline\"><input type=\"radio\" name=\"docFormat\" value=\"json\" v-model=\"person.docFormat\" placeholder=\"\"\n              :disabled=\"mode === 'edit'\" v-on:input=\"$v.person.docFormat.$touch\">JSON</label>\n          </div>\n          <div class=\"col-sm-9\">\n            <label class=\"radio-inline\"><input type=\"radio\" name=\"docFormat\" value=\"xml\" v-model=\"person.docFormat\" placeholder=\"\"\n              :disabled=\"mode === 'edit'\" v-on:input=\"$v.person.docFormat.$touch\">XML</label>\n          </div>\n        </div-->\n        <div class=\"row form-error\" ng-if=\"$v.person.docFormat.$invalid\">\n          <div class=\"col-md-10 col-md-offset-2 has-error has-feedback\" >\n            <div>\n              <p class=\"alert alert-danger\" v-if=\"!$v.person.docFormat.required\">Document Format is required.</p>\n            </div>\n          </div>\n        </div>\n        <div class=\"row\">\n          <div class=\"col-md-12 text-right\">\n            <router-link to=\"/\" class=\"btn btn-default\">Cancel</router-link>\n            <button class=\"btn btn-primary\" v-on:click.prevent=\"submit()\">Submit</button>\n          </div>\n        </div>\n      </form>\n    </div>\n  </div>\n</template>\n\n<script>\nimport * as X2JS from 'x2js';\nimport {\n  required,\n  minLength,\n  maxLength,\n  minValue,\n  maxValue,\n  numeric,\n  email\n} from 'vuelidate/lib/validators';\nimport crudApi from '@/api/CRUDApi.js';\n\nconst x2js = new X2JS();\n\nexport default {\n  name: 'CreatePage',\n  props: ['type', 'id'],\n  data() {\n    if (this.id) {\n      crudApi.read(this.type, this.id).then(response => {\n        this.person = JSON.parse(response.response);\n      });\n    }\n    return {\n      person: this.initPerson(),\n      newTag: null\n    };\n  },\n  computed: {\n    profile() {\n      return this.$store.state.auth.profile || {};\n    },\n    mode() {\n      if (this.id) {\n        return 'edit';\n      } else {\n        return 'create';\n      }\n    }\n  },\n  validations: {\n    person: {\n      name: {\n        required,\n        minLength: minLength(3),\n        maxLength: maxLength(100)\n      },\n      age: {\n        numeric\n      },\n      eyeColor: {\n        required\n      },\n      gender: {\n        required\n      },\n      email: {\n        email\n      },\n      location: {\n        latitude: {\n          required,\n          minValue: minValue(-90),\n          maxValue: maxValue(90)\n        },\n        longitude: {\n          required,\n          minValue: minValue(-180),\n          maxValue: maxValue(180)\n        }\n      },\n      docFormat: {\n        required\n      }\n    }\n  },\n  methods: {\n    initPerson() {\n      if (this.id) {\n        return this.$store\n          .dispatch('crud/' + this.type + '/view', {\n            id: this.id,\n            view: 'metadata'\n          })\n          .then(result => {\n            if (!result.isError) {\n              var metadata = JSON.parse(result.response);\n              return this.$store\n                .dispatch('crud/' + this.type + '/read', { id: this.id })\n                .then(result => {\n                  if (!result.isError) {\n                    var doc = result.response;\n                    var person = null;\n                    if (metadata.format === 'json') {\n                      person = JSON.parse(doc);\n                    } else {\n                      person = x2js.xml2js(doc);\n                      if (person.xml) {\n                        person = person.xml;\n                      }\n                    }\n                    if (!person.tags) {\n                      person.tags = [];\n                    }\n                    if (!person.location) {\n                      person.location = {\n                        latitude: 0,\n                        longitude: 0\n                      };\n                    }\n                  } else {\n                    // error\n                    return null;\n                  }\n                });\n            } else {\n              // error\n              return null;\n            }\n          });\n      } else {\n        return {\n          name: null,\n          about: null,\n          greeting: null,\n          balance: 0,\n          picture: 'http://placehold.it/32x32',\n          age: 0,\n          eyeColor: null,\n          gender: null,\n          company: null,\n          email: null,\n          phone: null,\n          address: null,\n          location: {\n            latitude: 0,\n            longitude: 0\n          },\n          tags: [],\n          isActive: true,\n          docFormat: 'json'\n        };\n      }\n    },\n    addTag() {\n      if (\n        this.newTag &&\n        this.newTag !== '' &&\n        this.person.tags.indexOf(this.newTag) < 0\n      ) {\n        this.person.tags.push(this.newTag);\n      }\n      this.newTag = null;\n    },\n    removeTag(index) {\n      this.person.tags.splice(index, 1);\n    },\n    submit() {\n      if (this.$v.$invalid) {\n        return;\n      }\n      const toast = this.$parent.$refs.toast;\n      //var extension = '.json';\n      var data = this.person;\n      // if (this.person.docFormat === 'xml') {\n      //   extension = '.xml';\n      //   var wrap = {\n      //     xml: this.person\n      //   };\n      //   data = x2js.js2xml(wrap);\n      // }\n      if (this.mode === 'create') {\n        return this.$store\n          .dispatch('crud/' + this.type + '/create', {\n            data,\n            format: this.person.docFormat\n          })\n          .then(response => {\n            if (response.isError) {\n              toast.showToast(response.error, { theme: 'error' });\n            } else {\n              toast.showToast('Created', { theme: 'success' });\n              this.$router.push({\n                name: 'root.view',\n                params: { id: response.id }\n              });\n            }\n          });\n      } else {\n        // use update when in update mode\n        return this.$store\n          .dispatch('crud/' + this.type + '/update', {\n            id: this.id,\n            data,\n            format: this.person.docFormat\n          })\n          .then(response => {\n            if (response.isError) {\n              toast.showToast(response.error, { theme: 'error' });\n            } else {\n              toast.showToast('Saved', { theme: 'success' });\n              this.$router.push({ name: 'root.view', params: { id: this.id } });\n            }\n          });\n      }\n    }\n  }\n};\n</script>\n"],"sourceRoot":"src\\views"}]}