{"remainingRequest":"C:\\demo\\metadata\\ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\demo\\metadata\\ui\\src\\components\\ml-similar.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\demo\\metadata\\ui\\src\\components\\ml-similar.vue","mtime":1707869128000},{"path":"C:\\demo\\metadata\\ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1707869666000},{"path":"C:\\demo\\metadata\\ui\\node_modules\\babel-loader\\lib\\index.js","mtime":1707869666000},{"path":"C:\\demo\\metadata\\ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1707869666000},{"path":"C:\\demo\\metadata\\ui\\node_modules\\vue-loader\\lib\\index.js","mtime":1707869662000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  name: 'ml-similar',\n  props: {\n    title: {\n      type: String,\n      default() {\n        return '';\n      }\n    },\n    uri: {\n      type: String,\n      required: true\n    }\n  },\n  data() {\n    return {\n      loading: false,\n      similar: []\n    };\n  },\n  methods: {\n    updateSimilar() {\n      if (this.uri) {\n        this.loading = true;\n        // TODO: fetching similar docs needs a better middleware/backend solution\n        this.$http({\n          method: 'GET',\n          url: '/v1/resources/extsimilar',\n          params: {\n            'rs:uri': this.uri\n          },\n          auth: {\n            username: this.$store.state.auth.username,\n            password: this.$store.state.auth.password,\n            sendImmediately: true\n          }\n        }).then(\n          response => {\n            this.similar = response.data.similar;\n            this.loading = false;\n          },\n          error => {\n            console.log(error);\n            this.loading = false;\n          }\n        );\n      }\n    },\n    resultLabel(result) {\n      if (result.label || result.uri) {\n        return result.label || result.uri.split('/').pop();\n      } else {\n        return result.split('/').pop();\n      }\n    }\n  },\n  watch: {\n    uri(newUri) {\n      if (newUri) {\n        this.updateSimilar();\n      }\n    }\n  },\n  mounted() {\n    this.updateSimilar();\n  }\n};\n",{"version":3,"sources":["ml-similar.vue"],"names":[],"mappings":";;;;;;;;;;;;;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ml-similar.vue","sourceRoot":"src\\components","sourcesContent":["<template>\n  <div class=\"similar-items\">\n    <i class=\"fa fa-refresh fa-spin pull-right\" v-if=\"loading\"></i>\n    <h3 v-if=\"title\">{{ title }}</h3>\n    <ul>\n      <li v-for=\"(result, $index) in similar\" :key=\"$index\">\n        <router-link :to=\"{ name: 'root.view', params: {id: result.id || encodeURIComponent(result) } }\">{{ resultLabel(result) }}</router-link>\n      </li>\n    </ul>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'ml-similar',\n  props: {\n    title: {\n      type: String,\n      default() {\n        return '';\n      }\n    },\n    uri: {\n      type: String,\n      required: true\n    }\n  },\n  data() {\n    return {\n      loading: false,\n      similar: []\n    };\n  },\n  methods: {\n    updateSimilar() {\n      if (this.uri) {\n        this.loading = true;\n        // TODO: fetching similar docs needs a better middleware/backend solution\n        this.$http({\n          method: 'GET',\n          url: '/v1/resources/extsimilar',\n          params: {\n            'rs:uri': this.uri\n          },\n          auth: {\n            username: this.$store.state.auth.username,\n            password: this.$store.state.auth.password,\n            sendImmediately: true\n          }\n        }).then(\n          response => {\n            this.similar = response.data.similar;\n            this.loading = false;\n          },\n          error => {\n            console.log(error);\n            this.loading = false;\n          }\n        );\n      }\n    },\n    resultLabel(result) {\n      if (result.label || result.uri) {\n        return result.label || result.uri.split('/').pop();\n      } else {\n        return result.split('/').pop();\n      }\n    }\n  },\n  watch: {\n    uri(newUri) {\n      if (newUri) {\n        this.updateSimilar();\n      }\n    }\n  },\n  mounted() {\n    this.updateSimilar();\n  }\n};\n</script>\n"]}]}