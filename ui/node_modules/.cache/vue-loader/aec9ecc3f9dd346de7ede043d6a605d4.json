{"remainingRequest":"/space/metadata/ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/space/metadata/ui/src/views/CreatePage.vue?vue&type=script&lang=js&","dependencies":[{"path":"/space/metadata/ui/src/views/CreatePage.vue","mtime":1707869128060},{"path":"/space/metadata/ui/node_modules/cache-loader/dist/cjs.js","mtime":1707869666420},{"path":"/space/metadata/ui/node_modules/babel-loader/lib/index.js","mtime":1707869666788},{"path":"/space/metadata/ui/node_modules/cache-loader/dist/cjs.js","mtime":1707869666420},{"path":"/space/metadata/ui/node_modules/vue-loader/lib/index.js","mtime":1707869662322}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport * as X2JS from 'x2js';\nimport {\n  required,\n  minLength,\n  maxLength,\n  minValue,\n  maxValue,\n  numeric,\n  email\n} from 'vuelidate/lib/validators';\nimport crudApi from '@/api/CRUDApi.js';\n\nconst x2js = new X2JS();\n\nexport default {\n  name: 'CreatePage',\n  props: ['type', 'id'],\n  data() {\n    if (this.id) {\n      crudApi.read(this.type, this.id).then(response => {\n        this.person = JSON.parse(response.response);\n      });\n    }\n    return {\n      person: this.initPerson(),\n      newTag: null\n    };\n  },\n  computed: {\n    profile() {\n      return this.$store.state.auth.profile || {};\n    },\n    mode() {\n      if (this.id) {\n        return 'edit';\n      } else {\n        return 'create';\n      }\n    }\n  },\n  validations: {\n    person: {\n      name: {\n        required,\n        minLength: minLength(3),\n        maxLength: maxLength(100)\n      },\n      age: {\n        numeric\n      },\n      eyeColor: {\n        required\n      },\n      gender: {\n        required\n      },\n      email: {\n        email\n      },\n      location: {\n        latitude: {\n          required,\n          minValue: minValue(-90),\n          maxValue: maxValue(90)\n        },\n        longitude: {\n          required,\n          minValue: minValue(-180),\n          maxValue: maxValue(180)\n        }\n      },\n      docFormat: {\n        required\n      }\n    }\n  },\n  methods: {\n    initPerson() {\n      if (this.id) {\n        return this.$store\n          .dispatch('crud/' + this.type + '/view', {\n            id: this.id,\n            view: 'metadata'\n          })\n          .then(result => {\n            if (!result.isError) {\n              var metadata = JSON.parse(result.response);\n              return this.$store\n                .dispatch('crud/' + this.type + '/read', { id: this.id })\n                .then(result => {\n                  if (!result.isError) {\n                    var doc = result.response;\n                    var person = null;\n                    if (metadata.format === 'json') {\n                      person = JSON.parse(doc);\n                    } else {\n                      person = x2js.xml2js(doc);\n                      if (person.xml) {\n                        person = person.xml;\n                      }\n                    }\n                    if (!person.tags) {\n                      person.tags = [];\n                    }\n                    if (!person.location) {\n                      person.location = {\n                        latitude: 0,\n                        longitude: 0\n                      };\n                    }\n                  } else {\n                    // error\n                    return null;\n                  }\n                });\n            } else {\n              // error\n              return null;\n            }\n          });\n      } else {\n        return {\n          name: null,\n          about: null,\n          greeting: null,\n          balance: 0,\n          picture: 'http://placehold.it/32x32',\n          age: 0,\n          eyeColor: null,\n          gender: null,\n          company: null,\n          email: null,\n          phone: null,\n          address: null,\n          location: {\n            latitude: 0,\n            longitude: 0\n          },\n          tags: [],\n          isActive: true,\n          docFormat: 'json'\n        };\n      }\n    },\n    addTag() {\n      if (\n        this.newTag &&\n        this.newTag !== '' &&\n        this.person.tags.indexOf(this.newTag) < 0\n      ) {\n        this.person.tags.push(this.newTag);\n      }\n      this.newTag = null;\n    },\n    removeTag(index) {\n      this.person.tags.splice(index, 1);\n    },\n    submit() {\n      if (this.$v.$invalid) {\n        return;\n      }\n      const toast = this.$parent.$refs.toast;\n      //var extension = '.json';\n      var data = this.person;\n      // if (this.person.docFormat === 'xml') {\n      //   extension = '.xml';\n      //   var wrap = {\n      //     xml: this.person\n      //   };\n      //   data = x2js.js2xml(wrap);\n      // }\n      if (this.mode === 'create') {\n        return this.$store\n          .dispatch('crud/' + this.type + '/create', {\n            data,\n            format: this.person.docFormat\n          })\n          .then(response => {\n            if (response.isError) {\n              toast.showToast(response.error, { theme: 'error' });\n            } else {\n              toast.showToast('Created', { theme: 'success' });\n              this.$router.push({\n                name: 'root.view',\n                params: { id: response.id }\n              });\n            }\n          });\n      } else {\n        // use update when in update mode\n        return this.$store\n          .dispatch('crud/' + this.type + '/update', {\n            id: this.id,\n            data,\n            format: this.person.docFormat\n          })\n          .then(response => {\n            if (response.isError) {\n              toast.showToast(response.error, { theme: 'error' });\n            } else {\n              toast.showToast('Saved', { theme: 'success' });\n              this.$router.push({ name: 'root.view', params: { id: this.id } });\n            }\n          });\n      }\n    }\n  }\n};\n",{"version":3,"sources":["CreatePage.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwfile":"CreatePage.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div class=\"create\">\n    <div class=\"row\" v-if=\"!profile.disallowUpdates\">\n      <div class=\"col-sm-12\">\n        <b-alert variant=\"warning\">Not allowed</b-alert>\n      </div>\n    </div>\n    <div class=\"row\" v-if=\"profile.disallowUpdates\">\n      <div class=\"col-sm-12\">\n        <b-alert variant=\"warning\">Updates are disallowed</b-alert>\n      </div>\n    </div>\n    <div v-if=\"!profile.disallowUpdates\">\n      <div class=\"row\">\n        <div class=\"col-sm-2\">\n        </div>\n        <h2 class=\"col-sm-10\" v-if=\"mode === 'create'\">Create a Document</h2>\n        <h2 class=\"col-sm-10\" v-if=\"mode === 'edit'\">Edit \"{{ id }}\"</h2>\n      </div>\n      <form class=\"form-horizontal\">\n        <div class=\"form-group\">\n          <div class=\"col-sm-8 col-sm-offset-2\">\n            <strong class=\"required alert-danger\"><em>required</em></strong>\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label class=\"col-sm-2 control-label required\">Name</label>\n          <div class=\"col-sm-10\">\n            <input type=\"text\" class=\"form-control\" placeholder=\"person's name\" v-model.trim=\"person.name\"\n               name=\"name\" minlength=\"3\" maxlength=\"100\" v-on:input=\"$v.person.name.$touch\">\n          </div>\n        </div>\n        <div class=\"row form-error\" v-if=\"$v.person.name.$invalid\">\n          <div class=\"col-md-10 col-md-offset-2 has-error has-feedback\" >\n            <div>\n              <p class=\"alert alert-danger\" v-if=\"!$v.person.name.required\">Person's name is required.</p>\n              <p class=\"alert alert-danger\" v-if=\"!$v.person.name.minLength\">Minimum 3 characters.</p>\n              <p class=\"alert alert-danger\" v-if=\"!$v.person.name.maxLength\">Maximum of 100 characters.</p>\n            </div>\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label class=\"col-sm-2 control-label\">About</label>\n          <div class=\"col-sm-10\">\n            <textarea rows=\"8\" class=\"form-control\" v-model=\"person.about\"/>\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label class=\"col-sm-2 control-label\">Greeting</label>\n          <div class=\"col-sm-10\">\n            <input type=\"text\" class=\"form-control\" v-model=\"person.greeting\" placeholder=\"How this person should be greeted on login\">\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label class=\"col-sm-2 control-label\">Balance</label>\n          <div class=\"col-sm-10\">\n            <input type=\"text\" class=\"form-control\" v-model=\"person.balance\" placeholder=\"\">\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label class=\"col-sm-2 control-label\">Picture</label>\n          <div class=\"col-sm-10\">\n            <input type=\"text\" class=\"form-control\" v-model=\"person.picture\" placeholder=\"\">\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label class=\"col-sm-2 control-label\">Age</label>\n          <div class=\"col-sm-10\">\n            <input type=\"number\" class=\"form-control\" v-model=\"person.age\" placeholder=\"\" name=\"age\" v-on:input=\"$v.person.age.$touch\">\n          </div>\n        </div>\n        <div class=\"row form-error\" v-if=\"$v.person.age.$invalid\">\n          <div class=\"col-md-10 col-md-offset-2 has-error has-feedback\" >\n            <div>\n              <p class=\"alert alert-danger\" v-if=\"!$v.person.age.numeric\">Invalid age format.</p>\n            </div>\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label class=\"col-sm-2 control-label required\">Eye Color</label>\n          <div class=\"col-sm-10\">\n            <input type=\"text\" class=\"form-control\" v-model=\"person.eyeColor\" placeholder=\"\" name=\"eyeColor\"  v-on:input=\"$v.person.eyeColor.$touch\"/>\n          </div>\n        </div>\n        <div class=\"row form-error\" v-if=\"$v.person.eyeColor.$invalid\">\n          <div class=\"col-md-10 col-md-offset-2 has-error has-feedback\" >\n            <div>\n              <p class=\"alert alert-danger\" v-if=\"!$v.person.eyeColor.required\">Eye Color is required.</p>\n            </div>\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label class=\"col-sm-2 control-label required\">Gender</label>\n          <div class=\"col-sm-1\">\n            <label class=\"radio-inline\"><input type=\"radio\" value=\"female\" v-model=\"person.gender\"\n              placeholder=\"\" name=\"gender\" v-on:input=\"$v.person.gender.$touch\">Female</label>\n          </div>\n          <div class=\"col-sm-1\">\n            <label class=\"radio-inline\"><input type=\"radio\" value=\"male\" v-model=\"person.gender\"\n              placeholder=\"\" name=\"gender\" v-on:input=\"$v.person.gender.$touch\">Male</label>\n          </div>\n        </div>\n        <div class=\"row form-error\" v-if=\"$v.person.gender.$invalid\">\n          <div class=\"col-md-10 col-md-offset-2 has-error has-feedback\" >\n            <div>\n              <p class=\"alert alert-danger\" v-if=\"!$v.person.gender.required\">Gender is required.</p>\n            </div>\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label class=\"col-sm-2 control-label\">Company</label>\n          <div class=\"col-sm-10\">\n            <input type=\"text\" class=\"form-control\" v-model=\"person.company\" placeholder=\"\">\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label class=\"col-sm-2 control-label\">Email</label>\n          <div class=\"col-sm-10\">\n            <input type=\"email\" class=\"form-control\" v-model=\"person.email\" placeholder=\"\" name=\"email\" v-on:input=\"$v.person.email.$touch\">\n          </div>\n        </div>\n        <div class=\"row form-error\" ng-if=\"$v.person.email.$invalid\">\n          <div class=\"col-md-10 col-md-offset-2 has-error has-feedback\" >\n            <div>\n              <p class=\"alert alert-danger\" v-if=\"!$v.person.email.email\">Invalid email format.</p>\n            </div>\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label class=\"col-sm-2 control-label\">Phone</label>\n          <div class=\"col-sm-10\">\n            <input type=\"text\" class=\"form-control\" v-model=\"person.phone\" placeholder=\"\">\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label class=\"col-sm-2 control-label\">Address</label>\n          <div class=\"col-sm-10\">\n            <input type=\"text\" class=\"form-control\" v-model=\"person.address\" placeholder=\"\">\n          </div>\n        </div>\n        <div class=\"form-group\" v-if=\"person.location\">\n          <label class=\"col-sm-2 control-label\">Location</label>\n          <div class=\"col-sm-5\">\n            <input type=\"number\" class=\"form-control\" v-model=\"person.location.latitude\" placeholder=\"\"\n              min=\"-90\" max=\"90\" name=\"latitude\" v-on:input=\"$v.person.location.latitude.$touch\">\n          </div>\n          <div class=\"col-sm-5\">\n            <input type=\"number\" class=\"form-control\" v-model=\"person.location.longitude\" placeholder=\"\"\n               min=\"-180\" max=\"180\" name=\"longitude\" v-on:input=\"$v.person.location.longitude.$touch\">\n          </div>\n        </div>\n        <div class=\"row form-error\" v-if=\"$v.person.location.latitude.$invalid\">\n          <div class=\"col-md-10 col-md-offset-2 has-error has-feedback\" >\n            <div>\n              <p class=\"alert alert-danger\" v-if=\"!$v.person.location.latitude.required\">Latitude is required if longitude is filled.</p>\n              <p class=\"alert alert-danger\" v-if=\"!$v.person.location.latitude.minValue\">Minimum value for latitude is -90.</p>\n              <p class=\"alert alert-danger\" v-if=\"!$v.person.location.latitude.maxValue\">Maximum value for latitude is 90.</p>\n            </div>\n          </div>\n        </div>\n        <div class=\"row form-error\" ng-if=\"$v.person.location.longitude.$invalid\">\n          <div class=\"col-md-10 col-md-offset-2 has-error has-feedback\" >\n              <p class=\"alert alert-danger\" v-if=\"!$v.person.location.longitude.required\">Longitude is required if latitude is filled.</p>\n              <p class=\"alert alert-danger\" v-if=\"!$v.person.location.longitude.minValue\">Minimum value for longitude is -180.</p>\n              <p class=\"alert alert-danger\" v-if=\"!$v.person.location.longitude.maxValue\">Maximum value for longitude is 180.</p>\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label class=\"col-sm-2 control-label\">Tags</label>\n          <div class=\"col-sm-9\">\n            <input type=\"text\" class=\"form-control\" v-model=\"newTag\">\n            <div class=\"tag btn btn-info\" v-for=\"(tag, $index) in person.tags\" :key=\"$index\">\n              <span>{{tag}}</span>\n              <span class=\"glyphicon glyphicon-remove-circle\" v-on:click.prevent=\"removeTag(index)\"></span>\n            </div>\n          </div>\n          <div class=\"col-sm-1 text-right\">\n            <button class=\"add-feature btn btn-info\" v-on:click.prevent=\"addTag()\">Add</button>\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label class=\"col-sm-2 control-label\">Active</label>\n          <div class=\"col-sm-10\">\n            <input type=\"checkbox\" v-model=\"person.isActive\"/>\n          </div>\n        </div>\n        <!--div class=\"form-group\">\n          <label class=\"col-sm-2 control-label required\">Document Format</label>\n          <div class=\"col-sm-1\">\n            <label class=\"radio-inline\"><input type=\"radio\" name=\"docFormat\" value=\"json\" v-model=\"person.docFormat\" placeholder=\"\"\n              :disabled=\"mode === 'edit'\" v-on:input=\"$v.person.docFormat.$touch\">JSON</label>\n          </div>\n          <div class=\"col-sm-9\">\n            <label class=\"radio-inline\"><input type=\"radio\" name=\"docFormat\" value=\"xml\" v-model=\"person.docFormat\" placeholder=\"\"\n              :disabled=\"mode === 'edit'\" v-on:input=\"$v.person.docFormat.$touch\">XML</label>\n          </div>\n        </div-->\n        <div class=\"row form-error\" ng-if=\"$v.person.docFormat.$invalid\">\n          <div class=\"col-md-10 col-md-offset-2 has-error has-feedback\" >\n            <div>\n              <p class=\"alert alert-danger\" v-if=\"!$v.person.docFormat.required\">Document Format is required.</p>\n            </div>\n          </div>\n        </div>\n        <div class=\"row\">\n          <div class=\"col-md-12 text-right\">\n            <router-link to=\"/\" class=\"btn btn-default\">Cancel</router-link>\n            <button class=\"btn btn-primary\" v-on:click.prevent=\"submit()\">Submit</button>\n          </div>\n        </div>\n      </form>\n    </div>\n  </div>\n</template>\n\n<script>\nimport * as X2JS from 'x2js';\nimport {\n  required,\n  minLength,\n  maxLength,\n  minValue,\n  maxValue,\n  numeric,\n  email\n} from 'vuelidate/lib/validators';\nimport crudApi from '@/api/CRUDApi.js';\n\nconst x2js = new X2JS();\n\nexport default {\n  name: 'CreatePage',\n  props: ['type', 'id'],\n  data() {\n    if (this.id) {\n      crudApi.read(this.type, this.id).then(response => {\n        this.person = JSON.parse(response.response);\n      });\n    }\n    return {\n      person: this.initPerson(),\n      newTag: null\n    };\n  },\n  computed: {\n    profile() {\n      return this.$store.state.auth.profile || {};\n    },\n    mode() {\n      if (this.id) {\n        return 'edit';\n      } else {\n        return 'create';\n      }\n    }\n  },\n  validations: {\n    person: {\n      name: {\n        required,\n        minLength: minLength(3),\n        maxLength: maxLength(100)\n      },\n      age: {\n        numeric\n      },\n      eyeColor: {\n        required\n      },\n      gender: {\n        required\n      },\n      email: {\n        email\n      },\n      location: {\n        latitude: {\n          required,\n          minValue: minValue(-90),\n          maxValue: maxValue(90)\n        },\n        longitude: {\n          required,\n          minValue: minValue(-180),\n          maxValue: maxValue(180)\n        }\n      },\n      docFormat: {\n        required\n      }\n    }\n  },\n  methods: {\n    initPerson() {\n      if (this.id) {\n        return this.$store\n          .dispatch('crud/' + this.type + '/view', {\n            id: this.id,\n            view: 'metadata'\n          })\n          .then(result => {\n            if (!result.isError) {\n              var metadata = JSON.parse(result.response);\n              return this.$store\n                .dispatch('crud/' + this.type + '/read', { id: this.id })\n                .then(result => {\n                  if (!result.isError) {\n                    var doc = result.response;\n                    var person = null;\n                    if (metadata.format === 'json') {\n                      person = JSON.parse(doc);\n                    } else {\n                      person = x2js.xml2js(doc);\n                      if (person.xml) {\n                        person = person.xml;\n                      }\n                    }\n                    if (!person.tags) {\n                      person.tags = [];\n                    }\n                    if (!person.location) {\n                      person.location = {\n                        latitude: 0,\n                        longitude: 0\n                      };\n                    }\n                  } else {\n                    // error\n                    return null;\n                  }\n                });\n            } else {\n              // error\n              return null;\n            }\n          });\n      } else {\n        return {\n          name: null,\n          about: null,\n          greeting: null,\n          balance: 0,\n          picture: 'http://placehold.it/32x32',\n          age: 0,\n          eyeColor: null,\n          gender: null,\n          company: null,\n          email: null,\n          phone: null,\n          address: null,\n          location: {\n            latitude: 0,\n            longitude: 0\n          },\n          tags: [],\n          isActive: true,\n          docFormat: 'json'\n        };\n      }\n    },\n    addTag() {\n      if (\n        this.newTag &&\n        this.newTag !== '' &&\n        this.person.tags.indexOf(this.newTag) < 0\n      ) {\n        this.person.tags.push(this.newTag);\n      }\n      this.newTag = null;\n    },\n    removeTag(index) {\n      this.person.tags.splice(index, 1);\n    },\n    submit() {\n      if (this.$v.$invalid) {\n        return;\n      }\n      const toast = this.$parent.$refs.toast;\n      //var extension = '.json';\n      var data = this.person;\n      // if (this.person.docFormat === 'xml') {\n      //   extension = '.xml';\n      //   var wrap = {\n      //     xml: this.person\n      //   };\n      //   data = x2js.js2xml(wrap);\n      // }\n      if (this.mode === 'create') {\n        return this.$store\n          .dispatch('crud/' + this.type + '/create', {\n            data,\n            format: this.person.docFormat\n          })\n          .then(response => {\n            if (response.isError) {\n              toast.showToast(response.error, { theme: 'error' });\n            } else {\n              toast.showToast('Created', { theme: 'success' });\n              this.$router.push({\n                name: 'root.view',\n                params: { id: response.id }\n              });\n            }\n          });\n      } else {\n        // use update when in update mode\n        return this.$store\n          .dispatch('crud/' + this.type + '/update', {\n            id: this.id,\n            data,\n            format: this.person.docFormat\n          })\n          .then(response => {\n            if (response.isError) {\n              toast.showToast(response.error, { theme: 'error' });\n            } else {\n              toast.showToast('Saved', { theme: 'success' });\n              this.$router.push({ name: 'root.view', params: { id: this.id } });\n            }\n          });\n      }\n    }\n  }\n};\n</script>\n"]}]}